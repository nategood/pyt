// Generated by CoffeeScript 1.3.1
(function() {
  var fs, jade, md, opt, pyt, stylus;

  fs = require("fs");

  md = require("markdown");

  jade = require("jade");

  stylus = require("stylus");

  opt = require("optimist");

  pyt = {
    template: '/themes/default/template.jade',
    style: '/themes/default/style.stylus',
    transition: '/transitions/slide.js',
    server: {
      init: function(options) {}
    },
    cli: function(args) {
      var input, output;
      args = opt["default"]({
        template: pyt.template,
        style: pyt.style,
        transition: pyt.transition
      }).boolean('o'.alias('o', 'stdout'.describe('o', 'Write to standard out instead of a file.'.boolean('w'.alias('w', 'watch'.describe('w', 'Watch a particular markdown file for changes and automatically compilte to pyt presentation on updates.'.parse(args)))))));
      if (args._.length > 0 && args._[0] === 'node') {
        args._.shift();
      }
      args._.shift();
      if (args._.length < 1) {
        pyt.error("Expects at least one arguments");
      }
      if (args._.length < 2) {
        args.watch && pyt.error("Expects at two arguments when using --watch");
      }
      input = args._[0];
      output = args._.length > 1 ? args._[1] : null;
      if (args.watch) {
        return pyt.watch({
          input: input,
          output: output
        });
      } else {
        return pyt.render({
          input: input,
          output: output
        });
      }
    },
    watch: function(options) {
      pyt.render(options);
      return fs.watchFile(options.input, function(curr, prev) {
        if (curr.mtime === prev.mtime) {
          return;
        }
        return pyt.render(options);
      });
    },
    render: function(options) {
      var html, opts, path, prefix, rd, theme, transition, writeToFile;
      prefix = '<hr />';
      path = __dirname;
      theme = path + '/themes/default/index.jade';
      transition = path + '/transitions/slide.js';
      rd = function(path) {
        return fs.readFileSync(path).toString();
      };
      opts = {
        filename: theme
      };
      html = (jade.compile(rd(theme), opts))({
        title: "My Title",
        author: "Nathan",
        content: prefix + md.markdown.toHTML(rd(options.input)),
        scripts: [rd(path + '/pyt-client.js'), rd(path + '/assets/js/jquery.min.js'), rd(path + '/assets/js/jquery.scrollTo-1.4.2-min.js'), rd(transition)]
      });
      writeToFile = typeof options.output === 'string';
      if (writeToFile) {
        return fs.writeFile(options.output, html, function(err) {
          if (err) {
            return pyt.error("Unable to write file: " + output);
          }
        });
      } else {
        return process.stdout.write(html);
      }
    },
    error: function(e) {
      console.error(e);
      return process.exit(1);
    }
  };

  module.exports = pyt;

}).call(this);
